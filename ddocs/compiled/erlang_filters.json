{
   "_id": "_design/erlang_filters",
   "language": "erlang",
   "filters": {
       "doc_by_place": "        fun ({Doc}, {Req}) ->          SafeGetValue = fun(Key, PropListMaybe, Default) ->     if       is_tuple(PropListMaybe) andalso size(PropListMaybe) == 1 ->                           proplists:get_value(Key, element(1, PropListMaybe), Default);       is_list(PropListMaybe) ->         proplists:get_value(Key, PropListMaybe, Default);       true ->         Default     end   end,    SafeGetValueN = fun(Key, PropListMaybe, Default) -> proplists:get_value(Key, PropListMaybe, Default) end,    SafeGetValueL = fun(Key, PropListMaybe, Default) -> proplists:get_value(Key, element(1, PropListMaybe), Default) end,    DeepGet = fun(DeepGet, KeyList, PropList) ->     if       length(KeyList) > 1 andalso PropList == [] ->         undefined;       length(KeyList) == 1 ->         SafeGetValue(hd(KeyList), PropList, undefined);       true ->         DeepGet(DeepGet, tl(KeyList), SafeGetValue(hd(KeyList), PropList, []))     end   end,    FindPlace = fun(FindPlace, Place, QueryId) ->     if       Place == undefined ->         false;       true ->         case SafeGetValue(<<\"_id\">>, Place, undefined) =:= QueryId of           true -> true;           false -> FindPlace(FindPlace, SafeGetValue(<<\"parent\">>, Place, undefined), QueryId)         end     end   end,    Ok = fun(Place) ->     QueryId = DeepGet(DeepGet, [<<\"query\">>, <<\"id\">>], Req),     case QueryId =:= undefined of       true -> true;        false ->         case Place =:= undefined of           true -> DeepGet(DeepGet, [<<\"query\">>, <<\"unassigned\">>], Req) =:= <<\"true\">>;           false -> FindPlace(FindPlace, Place, QueryId)         end     end   end,    CouchUser = list_to_binary([       <<\"org.couchdb.user:\">>,       DeepGet(DeepGet, [<<\"userCtx\">>, <<\"name\">>], Req)]),    case proplists:get_value(<<\"_id\">>, Doc) of     <<\"design/medic\">> -> false;                                                <<\"resources\">> -> true;     CouchUser -> true;     _ -> case proplists:get_value(<<\"type\">>, Doc) of           <<\"data_record\">> ->             case proplists:get_value(<<\"kujua_message\">>, Doc) of               true ->                 Tasks = proplists:get_value(<<\"tasks\">>, Doc, []),                 if                   length(Tasks) > 0 ->                                          Ok(                       proplists:get_value(<<\"contact\">>,                         element(1, hd(proplists:get_value(<<\"messages\">>,                           element(1, hd(Tasks)))))));                   true ->                     false                 end;               _ ->                                  Ok(proplists:get_value(<<\"contact\">>, Doc))             end;           <<\"form\">> -> true;           <<\"clinic\">> -> Ok(Doc);           <<\"district_hospital\">> -> Ok(Doc);           <<\"health_center\">> -> Ok(Doc);           <<\"person\">> -> Ok(Doc);           _ -> false         end   end end."
   }
}