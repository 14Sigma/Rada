{
    "lib": {
        "filters": "exports.update_clinics = function(doc) {\n    return doc.form &&\n        doc.related_entities &&\n        !doc.related_entities.clinic;\n};\n\nexports.ohw_anc_report = function(doc) {\n    return doc.form === 'OANC' &&\n        doc.related_entities &&\n        doc.related_entities.clinic;\n};\n\nexports.ohw_pnc_report = function(doc) {\n    return doc.form === 'OPNC' &&\n        doc.related_entities &&\n        doc.related_entities.clinic;\n};\n\nexports.ohw_birth_report = function(doc) {\n    return doc.form === 'OBIR' &&\n        doc.patient_id &&\n        doc.related_entities &&\n        doc.related_entities.clinic;\n};\n\nexports.ohw_emergency_report = function(doc) {\n    return doc.form === 'OEMR' &&\n        doc.patient_id &&\n        doc.related_entities &&\n        doc.related_entities.clinic;\n};\n\nexports.ohw_labor_report = function(doc) {\n    return doc.form === 'OLAB' &&\n        doc.patient_id &&\n        doc.related_entities &&\n        doc.related_entities.clinic;\n};\n\nexports.ohw_notifications = function(doc) {\n    return doc.form === 'ONOT' &&\n        doc.patient_id &&\n        doc.related_entities &&\n        doc.related_entities.clinic;\n};\n\nexports.ohw_registration = function(doc) {\n    return doc.form === 'ORPT' &&\n        doc.related_entities &&\n        doc.related_entities.clinic &&\n        (!doc.patient_identifiers || doc.patient_identifiers.length === 0);\n};\n\nexports.twilio_message = function(doc) {\n    var tasks = doc.tasks || [];\n\n    return tasks.some(function(task) {\n        return task.state === 'pending';\n    });\n};\n",
        "views": "exports.due_tasks = {\n    map: function(doc) {\n        var tasks = doc.scheduled_tasks || [];\n\n        tasks.forEach(function(task, index) {\n            if (task.due) {\n                emit(task.due, index);\n            }\n        });\n    }\n};\n\n/*\n * Get clinic based on phone number\n */\nexports.clinic_by_phone = {\n    map: function(doc) {\n        if (doc.type === 'clinic' && doc.contact && doc.contact.phone) {\n            emit([doc.contact.phone], null);\n        }\n    }\n};\n\n/*\n * Get clinic based on reference id\n */\nexports.clinic_by_refid = {\n    map: function (doc) {\n        if (doc.type === 'clinic' && doc.contact && doc.contact.rc_code) {\n            // need String because rewriter wraps everything in quotes\n            emit([String(doc.contact.rc_code)], null);\n        }\n    }\n};\n\nexports.weekly_reminders = {\n  map: function(doc) {\n    var phone,\n        refid;\n\n    if (doc.form && doc.week_number && doc.year) {\n      phone = doc.related_entities && doc.related_entities.clinic && doc.related_entities.clinic.contact &&\n        doc.related_entities.clinic.contact.phone;\n      if (phone) {\n        emit([doc.form, doc.year, doc.week_number, phone], {\n          received: true\n        });\n      }\n    } else if (doc.type === 'weekly_reminder' && doc.related_form && doc.week && doc.year) {\n      emit([doc.related_form, doc.year, doc.week, doc.phone], {\n        sent: doc.day\n      });\n    }\n  },\n  reduce: function(keys, values) {\n    var result = {\n      received: false,\n      sent: []\n    };\n\n    values.forEach(function(value) {\n      if (value.sent) {\n        result.sent.push(value.sent);\n      }\n      result.received = result.received || !!value.received;\n    });\n    return result;\n  }\n}\n\nexports.ohw_registered_patients = {\n    map: function(doc) {\n        var ids = doc.patient_identifiers || [];\n\n        if (doc.form === 'ORPT') {\n            ids.forEach(function(id) {\n                emit(id, null);\n            });\n        }\n    }\n};\n",
        "index": "exports.views = require('./views');\nexports.filters = require('./filters');\n"
    },
    "filters": {
        "lib": {
            "transition": "var _ = require('underscore');\n\nexports.completed = function(doc, key) {\n    var transitions = doc.transitions || [];\n\n    return _.contains(transitions, key);\n}\n"
        },
        "update_clinics": "function(){return require(\"lib/index\")[\"filters\"][\"update_clinics\"].apply(this, arguments);}",
        "ohw_anc_report": "function(){return require(\"lib/index\")[\"filters\"][\"ohw_anc_report\"].apply(this, arguments);}",
        "ohw_pnc_report": "function(){return require(\"lib/index\")[\"filters\"][\"ohw_pnc_report\"].apply(this, arguments);}",
        "ohw_birth_report": "function(){return require(\"lib/index\")[\"filters\"][\"ohw_birth_report\"].apply(this, arguments);}",
        "ohw_emergency_report": "function(){return require(\"lib/index\")[\"filters\"][\"ohw_emergency_report\"].apply(this, arguments);}",
        "ohw_labor_report": "function(){return require(\"lib/index\")[\"filters\"][\"ohw_labor_report\"].apply(this, arguments);}",
        "ohw_notifications": "function(){return require(\"lib/index\")[\"filters\"][\"ohw_notifications\"].apply(this, arguments);}",
        "ohw_registration": "function(){return require(\"lib/index\")[\"filters\"][\"ohw_registration\"].apply(this, arguments);}",
        "twilio_message": "function(){return require(\"lib/index\")[\"filters\"][\"twilio_message\"].apply(this, arguments);}"
    },
    "views": {
        "due_tasks": {
            "map": "function (doc) {\n        var tasks = doc.scheduled_tasks || [];\n\n        tasks.forEach(function(task, index) {\n            if (task.due) {\n                emit(task.due, index);\n            }\n        });\n    }"
        },
        "clinic_by_phone": {
            "map": "function (doc) {\n        if (doc.type === 'clinic' && doc.contact && doc.contact.phone) {\n            emit([doc.contact.phone], null);\n        }\n    }"
        },
        "clinic_by_refid": {
            "map": "function (doc) {\n        if (doc.type === 'clinic' && doc.contact && doc.contact.rc_code) {\n            // need String because rewriter wraps everything in quotes\n            emit([String(doc.contact.rc_code)], null);\n        }\n    }"
        },
        "weekly_reminders": {
            "map": "function (doc) {\n    var phone,\n        refid;\n\n    if (doc.form && doc.week_number && doc.year) {\n      phone = doc.related_entities && doc.related_entities.clinic && doc.related_entities.clinic.contact &&\n        doc.related_entities.clinic.contact.phone;\n      if (phone) {\n        emit([doc.form, doc.year, doc.week_number, phone], {\n          received: true\n        });\n      }\n    } else if (doc.type === 'weekly_reminder' && doc.related_form && doc.week && doc.year) {\n      emit([doc.related_form, doc.year, doc.week, doc.phone], {\n        sent: doc.day\n      });\n    }\n  }",
            "reduce": "function (keys, values) {\n    var result = {\n      received: false,\n      sent: []\n    };\n\n    values.forEach(function(value) {\n      if (value.sent) {\n        result.sent.push(value.sent);\n      }\n      result.received = result.received || !!value.received;\n    });\n    return result;\n  }"
        },
        "ohw_registered_patients": {
            "map": "function (doc) {\n        var ids = doc.patient_identifiers || [];\n\n        if (doc.form === 'ORPT') {\n            ids.forEach(function(id) {\n                emit(id, null);\n            });\n        }\n    }"
        }
    },
    "rewrites": [],
    "_attachments": {
        "modules.js": {
            "content_type": "application/json; charset=utf-8",
            "data": "LypnbG9iYWwgd2luZG93OiBmYWxzZSwgJDogZmFsc2UsIHBhZ2VUcmFja2VyOiBmYWxzZSwga2Fuc286IHRydWUgKi8KCi8qKgogKiBDb2RlIHJlcXVpcmVkIHRvIGJvb3RzdHJhcCB0aGUgYnJvd3NlciBDb21tb25KUyBlbnZpcm9ubWVudC4KICovCgooZnVuY3Rpb24gKGV4cG9ydHMpIHsKCiAgICBleHBvcnRzLm1vZHVsZUNhY2hlID0ge307CgogICAgZXhwb3J0cy5ub3JtYWxpemVQYXRoID0gZnVuY3Rpb24gKHApIHsKICAgICAgICB2YXIgcGF0aCA9IFtdOwogICAgICAgIHZhciBwYXJ0cyA9IHAuc3BsaXQoJy8nKTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgIGlmIChwYXJ0c1tpXSA9PT0gJy4uJykgewogICAgICAgICAgICAgICAgcGF0aC5wb3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIGlmIChwYXJ0c1tpXSAhPT0gJy4nKSB7CiAgICAgICAgICAgICAgICBwYXRoLnB1c2gocGFydHNbaV0pOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBwYXRoLmpvaW4oJy8nKTsKICAgIH07CgogICAgZXhwb3J0cy5kaXJuYW1lID0gZnVuY3Rpb24gKHApIHsKICAgICAgICBpZiAocCA9PT0gJy8nKSB7CiAgICAgICAgICAgIHJldHVybiBwOwogICAgICAgIH0KICAgICAgICB2YXIgcGFydHMgPSBwLnNwbGl0KCcvJyk7CiAgICAgICAgcGFydHMucG9wKCk7CiAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMSAmJiBwYXJ0c1swXSA9PT0gJycpIHsKICAgICAgICAgICAgcmV0dXJuICcvJzsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oJy8nKTsKICAgIH07CgogICAgZXhwb3J0cy5jcmVhdGVSZXF1aXJlID0gZnVuY3Rpb24gKGN1cnJlbnQpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCkgewogICAgICAgICAgICB2YXIgcGF0aDsKICAgICAgICAgICAgaWYgKHRhcmdldC5jaGFyQXQoMCkgPT09ICcuJykgewogICAgICAgICAgICAgICAgdmFyIGRpciA9IGV4cG9ydHMuZGlybmFtZShjdXJyZW50KTsKICAgICAgICAgICAgICAgIHBhdGggPSBleHBvcnRzLm5vcm1hbGl6ZVBhdGgoZGlyICsgJy8nICsgdGFyZ2V0KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHBhdGggPSBleHBvcnRzLm5vcm1hbGl6ZVBhdGgodGFyZ2V0KTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgbSA9IGthbnNvLm1vZHVsZUNhY2hlW3BhdGhdOwogICAgICAgICAgICBpZiAoIW0pIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gc3VjaCBtb2R1bGU6ICcgKyBwYXRoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIW0ubG9hZGVkKSB7CiAgICAgICAgICAgICAgICBtLmV4cG9ydHMgPSB7fTsKICAgICAgICAgICAgICAgIG0uaWQgPSBwYXRoOwogICAgICAgICAgICAgICAgLy8gVE9ETzogcHJvcGVydHkgbm90IHByb3ZpZGVkIGJ5IGNvdWNoZGIsIGJ1dCBpcyBieSBub2RlOgogICAgICAgICAgICAgICAgLy9tLnJlcXVpcmUgPSBleHBvcnRzLmNyZWF0ZVJlcXVpcmUocGF0aCk7CiAgICAgICAgICAgICAgICAvLyBUT0RPOiBwcm9wZXJ0eSBub3QgcHJvdmlkZWQgYnkgY291Y2hkYiwgYnV0IGlzIGJ5IG5vZGU6CiAgICAgICAgICAgICAgICAvL20uZmlsZW5hbWUgPSAnJzsKICAgICAgICAgICAgICAgIC8vIFRPRE86IG1vZHVsZSBwcm9wZXJ0aWVzIHByb3ZpZGVkIGJ5IGNvdWNoZGIsIGJ1dCBub3QgYnkga2Fuc28KICAgICAgICAgICAgICAgIC8vICogY3VycmVudAogICAgICAgICAgICAgICAgLy8gKiBwYXJlbnQKICAgICAgICAgICAgICAgIC8vIHNldCB0aGlzIHRvIHRydWUgKmJlZm9yZSogY2FsbGluZyBtLmxvYWQgc28gY2lyY3VsYXIKICAgICAgICAgICAgICAgIC8vIHJlcXVpcmVzIGRvbid0IGJsb3cgdGhlIGNhbGwgc3RhY2sKICAgICAgICAgICAgICAgIG0ubG9hZGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIC8vbS5sb2FkKG0sIG0uZXhwb3J0cywgbS5yZXF1aXJlKTsKICAgICAgICAgICAgICAgIG0ubG9hZChtLCBtLmV4cG9ydHMsIGV4cG9ydHMuY3JlYXRlUmVxdWlyZShwYXRoKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG0uZXhwb3J0czsKICAgICAgICB9OwogICAgfTsKCiAgICBpZiAodHlwZW9mIHJlcXVpcmUgPT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgLy8gbWFrZSByZXF1aXJlIGF2YWlsYWJsZSBnbG9iYWxseSwgdW5sZXNzIGFscmVhZHkgaW4gYSBjb21tb25qcwogICAgICAgIC8vIGVudmlyb25tZW50CiAgICAgICAgdGhpcy5yZXF1aXJlID0gZXhwb3J0cy5jcmVhdGVSZXF1aXJlKCcnKTsKICAgIH0KCn0oKHR5cGVvZiBleHBvcnRzID09PSAndW5kZWZpbmVkJykgPyB0aGlzLmthbnNvID0ge306IG1vZHVsZS5leHBvcnRzKSk7CgoKLyoqCiAqIENvbW1vbkpTIG1vZHVsZXMgYXJlIHdyYXBwZWQgYW5kIGFwcGVuZGVkIHRvIHRoaXMgZmlsZS4KICovCi8qKioqKioqKioqIGxpYi9maWx0ZXJzICoqKioqKioqKiovCgprYW5zby5tb2R1bGVDYWNoZVsibGliL2ZpbHRlcnMiXSA9IHtsb2FkOiAoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cywgcmVxdWlyZSkgewoKZXhwb3J0cy51cGRhdGVfY2xpbmljcyA9IGZ1bmN0aW9uKGRvYykgewogICAgcmV0dXJuIGRvYy5mb3JtICYmCiAgICAgICAgZG9jLnJlbGF0ZWRfZW50aXRpZXMgJiYKICAgICAgICAhZG9jLnJlbGF0ZWRfZW50aXRpZXMuY2xpbmljOwp9OwoKZXhwb3J0cy5vaHdfYW5jX3JlcG9ydCA9IGZ1bmN0aW9uKGRvYykgewogICAgcmV0dXJuIGRvYy5mb3JtID09PSAnT0FOQycgJiYKICAgICAgICBkb2MucmVsYXRlZF9lbnRpdGllcyAmJgogICAgICAgIGRvYy5yZWxhdGVkX2VudGl0aWVzLmNsaW5pYzsKfTsKCmV4cG9ydHMub2h3X3BuY19yZXBvcnQgPSBmdW5jdGlvbihkb2MpIHsKICAgIHJldHVybiBkb2MuZm9ybSA9PT0gJ09QTkMnICYmCiAgICAgICAgZG9jLnJlbGF0ZWRfZW50aXRpZXMgJiYKICAgICAgICBkb2MucmVsYXRlZF9lbnRpdGllcy5jbGluaWM7Cn07CgpleHBvcnRzLm9od19iaXJ0aF9yZXBvcnQgPSBmdW5jdGlvbihkb2MpIHsKICAgIHJldHVybiBkb2MuZm9ybSA9PT0gJ09CSVInICYmCiAgICAgICAgZG9jLnBhdGllbnRfaWQgJiYKICAgICAgICBkb2MucmVsYXRlZF9lbnRpdGllcyAmJgogICAgICAgIGRvYy5yZWxhdGVkX2VudGl0aWVzLmNsaW5pYzsKfTsKCmV4cG9ydHMub2h3X2VtZXJnZW5jeV9yZXBvcnQgPSBmdW5jdGlvbihkb2MpIHsKICAgIHJldHVybiBkb2MuZm9ybSA9PT0gJ09FTVInICYmCiAgICAgICAgZG9jLnBhdGllbnRfaWQgJiYKICAgICAgICBkb2MucmVsYXRlZF9lbnRpdGllcyAmJgogICAgICAgIGRvYy5yZWxhdGVkX2VudGl0aWVzLmNsaW5pYzsKfTsKCmV4cG9ydHMub2h3X2xhYm9yX3JlcG9ydCA9IGZ1bmN0aW9uKGRvYykgewogICAgcmV0dXJuIGRvYy5mb3JtID09PSAnT0xBQicgJiYKICAgICAgICBkb2MucGF0aWVudF9pZCAmJgogICAgICAgIGRvYy5yZWxhdGVkX2VudGl0aWVzICYmCiAgICAgICAgZG9jLnJlbGF0ZWRfZW50aXRpZXMuY2xpbmljOwp9OwoKZXhwb3J0cy5vaHdfbm90aWZpY2F0aW9ucyA9IGZ1bmN0aW9uKGRvYykgewogICAgcmV0dXJuIGRvYy5mb3JtID09PSAnT05PVCcgJiYKICAgICAgICBkb2MucGF0aWVudF9pZCAmJgogICAgICAgIGRvYy5yZWxhdGVkX2VudGl0aWVzICYmCiAgICAgICAgZG9jLnJlbGF0ZWRfZW50aXRpZXMuY2xpbmljOwp9OwoKZXhwb3J0cy5vaHdfcmVnaXN0cmF0aW9uID0gZnVuY3Rpb24oZG9jKSB7CiAgICByZXR1cm4gZG9jLmZvcm0gPT09ICdPUlBUJyAmJgogICAgICAgIGRvYy5yZWxhdGVkX2VudGl0aWVzICYmCiAgICAgICAgZG9jLnJlbGF0ZWRfZW50aXRpZXMuY2xpbmljICYmCiAgICAgICAgKCFkb2MucGF0aWVudF9pZGVudGlmaWVycyB8fCBkb2MucGF0aWVudF9pZGVudGlmaWVycy5sZW5ndGggPT09IDApOwp9OwoKZXhwb3J0cy50d2lsaW9fbWVzc2FnZSA9IGZ1bmN0aW9uKGRvYykgewogICAgdmFyIHRhc2tzID0gZG9jLnRhc2tzIHx8IFtdOwoKICAgIHJldHVybiB0YXNrcy5zb21lKGZ1bmN0aW9uKHRhc2spIHsKICAgICAgICByZXR1cm4gdGFzay5zdGF0ZSA9PT0gJ3BlbmRpbmcnOwogICAgfSk7Cn07CgoKfSl9OwoKLyoqKioqKioqKiogbGliL3ZpZXdzICoqKioqKioqKiovCgprYW5zby5tb2R1bGVDYWNoZVsibGliL3ZpZXdzIl0gPSB7bG9hZDogKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMsIHJlcXVpcmUpIHsKCmV4cG9ydHMuZHVlX3Rhc2tzID0gewogICAgbWFwOiBmdW5jdGlvbihkb2MpIHsKICAgICAgICB2YXIgdGFza3MgPSBkb2Muc2NoZWR1bGVkX3Rhc2tzIHx8IFtdOwoKICAgICAgICB0YXNrcy5mb3JFYWNoKGZ1bmN0aW9uKHRhc2ssIGluZGV4KSB7CiAgICAgICAgICAgIGlmICh0YXNrLmR1ZSkgewogICAgICAgICAgICAgICAgZW1pdCh0YXNrLmR1ZSwgaW5kZXgpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9Cn07CgovKgogKiBHZXQgY2xpbmljIGJhc2VkIG9uIHBob25lIG51bWJlcgogKi8KZXhwb3J0cy5jbGluaWNfYnlfcGhvbmUgPSB7CiAgICBtYXA6IGZ1bmN0aW9uKGRvYykgewogICAgICAgIGlmIChkb2MudHlwZSA9PT0gJ2NsaW5pYycgJiYgZG9jLmNvbnRhY3QgJiYgZG9jLmNvbnRhY3QucGhvbmUpIHsKICAgICAgICAgICAgZW1pdChbZG9jLmNvbnRhY3QucGhvbmVdLCBudWxsKTsKICAgICAgICB9CiAgICB9Cn07CgovKgogKiBHZXQgY2xpbmljIGJhc2VkIG9uIHJlZmVyZW5jZSBpZAogKi8KZXhwb3J0cy5jbGluaWNfYnlfcmVmaWQgPSB7CiAgICBtYXA6IGZ1bmN0aW9uIChkb2MpIHsKICAgICAgICBpZiAoZG9jLnR5cGUgPT09ICdjbGluaWMnICYmIGRvYy5jb250YWN0ICYmIGRvYy5jb250YWN0LnJjX2NvZGUpIHsKICAgICAgICAgICAgLy8gbmVlZCBTdHJpbmcgYmVjYXVzZSByZXdyaXRlciB3cmFwcyBldmVyeXRoaW5nIGluIHF1b3RlcwogICAgICAgICAgICBlbWl0KFtTdHJpbmcoZG9jLmNvbnRhY3QucmNfY29kZSldLCBudWxsKTsKICAgICAgICB9CiAgICB9Cn07CgpleHBvcnRzLndlZWtseV9yZW1pbmRlcnMgPSB7CiAgbWFwOiBmdW5jdGlvbihkb2MpIHsKICAgIHZhciBwaG9uZSwKICAgICAgICByZWZpZDsKCiAgICBpZiAoZG9jLmZvcm0gJiYgZG9jLndlZWtfbnVtYmVyICYmIGRvYy55ZWFyKSB7CiAgICAgIHBob25lID0gZG9jLnJlbGF0ZWRfZW50aXRpZXMgJiYgZG9jLnJlbGF0ZWRfZW50aXRpZXMuY2xpbmljICYmIGRvYy5yZWxhdGVkX2VudGl0aWVzLmNsaW5pYy5jb250YWN0ICYmCiAgICAgICAgZG9jLnJlbGF0ZWRfZW50aXRpZXMuY2xpbmljLmNvbnRhY3QucGhvbmU7CiAgICAgIGlmIChwaG9uZSkgewogICAgICAgIGVtaXQoW2RvYy5mb3JtLCBkb2MueWVhciwgZG9jLndlZWtfbnVtYmVyLCBwaG9uZV0sIHsKICAgICAgICAgIHJlY2VpdmVkOiB0cnVlCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAoZG9jLnR5cGUgPT09ICd3ZWVrbHlfcmVtaW5kZXInICYmIGRvYy5yZWxhdGVkX2Zvcm0gJiYgZG9jLndlZWsgJiYgZG9jLnllYXIpIHsKICAgICAgZW1pdChbZG9jLnJlbGF0ZWRfZm9ybSwgZG9jLnllYXIsIGRvYy53ZWVrLCBkb2MucGhvbmVdLCB7CiAgICAgICAgc2VudDogZG9jLmRheQogICAgICB9KTsKICAgIH0KICB9LAogIHJlZHVjZTogZnVuY3Rpb24oa2V5cywgdmFsdWVzKSB7CiAgICB2YXIgcmVzdWx0ID0gewogICAgICByZWNlaXZlZDogZmFsc2UsCiAgICAgIHNlbnQ6IFtdCiAgICB9OwoKICAgIHZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgIGlmICh2YWx1ZS5zZW50KSB7CiAgICAgICAgcmVzdWx0LnNlbnQucHVzaCh2YWx1ZS5zZW50KTsKICAgICAgfQogICAgICByZXN1bHQucmVjZWl2ZWQgPSByZXN1bHQucmVjZWl2ZWQgfHwgISF2YWx1ZS5yZWNlaXZlZDsKICAgIH0pOwogICAgcmV0dXJuIHJlc3VsdDsKICB9Cn0KCmV4cG9ydHMub2h3X3JlZ2lzdGVyZWRfcGF0aWVudHMgPSB7CiAgICBtYXA6IGZ1bmN0aW9uKGRvYykgewogICAgICAgIHZhciBpZHMgPSBkb2MucGF0aWVudF9pZGVudGlmaWVycyB8fCBbXTsKCiAgICAgICAgaWYgKGRvYy5mb3JtID09PSAnT1JQVCcpIHsKICAgICAgICAgICAgaWRzLmZvckVhY2goZnVuY3Rpb24oaWQpIHsKICAgICAgICAgICAgICAgIGVtaXQoaWQsIG51bGwpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICB9Cn07CgoKfSl9OwoKLyoqKioqKioqKiogbGliL2luZGV4ICoqKioqKioqKiovCgprYW5zby5tb2R1bGVDYWNoZVsibGliL2luZGV4Il0gPSB7bG9hZDogKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMsIHJlcXVpcmUpIHsKCmV4cG9ydHMudmlld3MgPSByZXF1aXJlKCcuL3ZpZXdzJyk7CmV4cG9ydHMuZmlsdGVycyA9IHJlcXVpcmUoJy4vZmlsdGVycycpOwoKCn0pfTsKCi8qKioqKioqKioqIGZpbHRlcnMvbGliL3RyYW5zaXRpb24gKioqKioqKioqKi8KCmthbnNvLm1vZHVsZUNhY2hlWyJmaWx0ZXJzL2xpYi90cmFuc2l0aW9uIl0gPSB7bG9hZDogKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMsIHJlcXVpcmUpIHsKCnZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpOwoKZXhwb3J0cy5jb21wbGV0ZWQgPSBmdW5jdGlvbihkb2MsIGtleSkgewogICAgdmFyIHRyYW5zaXRpb25zID0gZG9jLnRyYW5zaXRpb25zIHx8IFtdOwoKICAgIHJldHVybiBfLmNvbnRhaW5zKHRyYW5zaXRpb25zLCBrZXkpOwp9CgoKfSl9OwoK"
        }
    },
    "kanso": {
        "config": {
            "name": "kujua-sentinel",
            "version": "0.0.1",
            "description": "Kujua Sentinel",
            "modules": [
                "lib",
                "filters"
            ],
            "load": "lib/index",
            "dependencies": {
                "modules": null,
                "properties": null
            },
            "minify": false
        },
        "build_time": "2012-12-11T21:30:26Z",
        "kanso_version": "0.2.2"
    }
}
