{
  "name": "pupil",
  "version": "1.0.2",
  "description": "A string-based JavaScript validation library.",
  "main": "src/pupil.js",
  "repository": {
    "type": "git",
    "url": "git@github.com:Dragory/Pupil.js.git"
  },
  "keywords": [
    "validate",
    "validation",
    "input",
    "rulestring",
    "rule-string"
  ],
  "author": {
    "name": "Miikka Virtanen"
  },
  "license": "BSD",
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-concat": "~0.3.0",
    "grunt-contrib-jshint": "~0.6.3",
    "grunt-contrib-uglify": "~0.2.2"
  },
  "readme": "# Pupil\nAn easy and powerful string-based validation library.\n\nThis is __Pupil.js__, the JavaScript version of the library.  \nA PHP version, Pupil.php, is planned.\n\n## Features\n* Supports IE7+\n* Supports Node.js\n* Nested validation rules\n* String-based validation rules for compatibility between different languages\n* Light revalidation via caching\n\n## Installation\n### Browser\nDownload `dist/pupil.min.js` and include it on your page.\n\n### Node.js\nInstall the module:\n```\nnpm install pupil\n```\nAnd then require it in your project:\n```javascript\nvar pupil = require('pupil');\n```\n\n## Usage\nThe basic syntax is this:\n\n```javascript\npupil.validate(rules, values);\n```\n\nWhere `rules` and `values` are objects with matching keys. The rules are specified as `rule strings`; more information on those below.\n\nFor example:\n\n```javascript\nvar rules = {\n\tname: 'min:3 && max:8',\n\tcountry: 'min:2'\n};\n\nvar values = {\n\tname: nameInputElem.value,\n\tcountry: countryInputElem.value\n};\n```\n\nThe two objects don't have to have identical keys, but values without a matching key in rules won't be evaluated at all.\n\nThe `validate()` method returns an object like this:\n\n```javascript\n{\n\tname: true,    // Name passed validation\n\tcountry: false // Country didn't\n}\n```\n\n## Rule strings\nRule strings are Pupil's primary method of specifying validation rules.\n\nLogical operators (`&& (and)`, `|| (or)`, `! (not)`) and \"blocks\" (`(`, `)`) have an identical syntax to most\nprogramming languages, but functions are used like this: `name:arg1,arg2` where `name` is\nthe name of the function and `arg1` and `arg2` are the arguments for it.\n\nFor each validation function, there is also a matching function prepended by `other` that allows you to run functions\non other values than the one the rule string is for. This can be useful for fields that have differing requirements depending on another field. For example:\n\n```javascript\n{\n\tstate: 'minLen:2 || ( ! otherEquals:country,US && minLen:0)'\n}\n```\n\nThe rule strings can also be nested indefinitely by using blocks.  \nThe following example would require a state name of at least 2 characters for those who have chosen US or CA as their country.\n\n```javascript\n{\n\tstate: 'minLen:2 || (( ! otherEquals:country,US && ! otherEquals:country,CA) && minLen:0)'\n}\n```\n\n## Validation functions\nThe following functions are available by default:\n```\nequals\niEquals      # A case-insensitive comparison\nsEquals      # A strict comparison\nsiEquals\nlenMin\nlenMax\nmin\nmax\nbetween\nin           # Compare to a list of values\nrequired\noptional\nnumeric\nalpha\nalphaNumeric\nemail\nregex        # Supply a custom regex\ninteger\nequalsTo     # Compare to another field by its key\n```\n\n### Adding custom functions\nYou can use the following syntax to add your own validation functions:\n\n```javascript\npupil.addFunction(name, callable);\n```\n\nWhere callable should, at the very least accept two arguments: `allValues` and `value`. `allValues` is an object containing every value that's being validated at the moment while `value` contains the value we're validating at the moment. Further arguments can be passed by rule strings like so:\n\n```javascript\ncustomFunction:arg1,arg2\n```\n\nThe function names are case-insensitive.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Dragory/Pupil.js/issues"
  },
  "_id": "pupil@1.0.2",
  "_from": "pupil@"
}
