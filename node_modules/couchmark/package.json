{
  "name": "couchmark",
  "version": "0.1.0",
  "description": "Wraps couchdb's `follow` to restart at the latest unhandled change.",
  "main": "index.js",
  "scripts": {
    "test": "node_modules/nodeunit/bin/nodeunit tests"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/wombleton/couchmark.git"
  },
  "keywords": [
    "follow",
    "changes",
    "couchdb"
  ],
  "author": {
    "name": "Rowan Crawford",
    "url": "wombleton@gmail.com"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "gitHead": "6070a7e0a7bda9062a40909675bcdbe012ca07df",
  "bugs": {
    "url": "https://github.com/wombleton/couchmark/issues"
  },
  "dependencies": {
    "follow": "~0.9.0",
    "cradle": "~0.6.6",
    "underscore": "~1.5.1",
    "async": "~0.2.9"
  },
  "devDependencies": {
    "nodeunit": "~0.8.1",
    "sinon": "~1.7.3"
  },
  "readme": "Couchmark\n==========\n\nWraps couchdb's `follow` to restart at the latest unhandled change by named streams. Marking a change as\nhandled is optimistic â€” it occurs as soon as the feed fires the `change` event.\n\nIt is for the case when your application is offline whilst documents continue to be inserted into a CouchDB\ndatabase; starting from the start becomes progressively worse as changes accumulate.\n\nThe feed returned from `couchmark` is a `follow` Feed.\n\nUses its own database on the same host as the feed's db to mark documents as handled.\n\nUsage\n=====\n\n    var feed = couchmark.Feed({\n        db: 'http://admin:admin@localhost:5984/app',\n        filter: 'app/filter',\n        stream: 'mystream',\n        couchmarkDb: 'my-db' // defaults to 'couchmark'\n    });\n\n    feed.on('change', function(change) {\n        // do work\n    });\n\n    feed.follow(); // actually starts as soon as couchmark has checked its database\n",
  "_id": "couchmark@0.1.0",
  "_from": "couchmark@~0.1.0"
}
