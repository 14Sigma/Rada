var updates = require('kujua-sms/updates'),
    lists = require('kujua-sms/lists'),
    logger = require('kujua-utils').logger,
    baseURL = require('duality/core').getBaseURL(),
    appdb = require('duality/core').getDBURL(),
    querystring = require('querystring'),
    jsDump = require('jsDump'),
    fakerequest = require('couch-fakerequest'),
    helpers = require('../../test-helpers/helpers'),
    _ = require('underscore')._;


var example = {
    sms_message: {
       from: "+13125551212",
       message: '1!YYYY!facility#2011#11#1#2#3#4#5#6#9#8#7#6#5#4',
       sent_timestamp: "1-19-12 18:45",
       sent_to: "+15551212",
       type: "sms_message",
       locale: "en",
       form: "YYYY"
    },
    clinic: {
        "_id": "4a6399c98ff78ac7da33b639ed60f458",
        "_rev": "1-0b8990a46b81aa4c5d08c4518add3786",
        "type": "clinic",
        "name": "Example clinic 1",
        "contact": {
            "name": "Sam Jones",
            "phone": "+13125551212"
        },
        "parent": {
            "type": "health_center",
            "contact": {
                "name": "Neal Young",
                "phone": "+17085551212"
            },
            "parent": {
                "type": "district_hospital",
                "contact": {
                    "name": "Bernie Mac",
                    "phone": "+14155551212"
                }
            }
        }
    },
    days_stocked_out: {
        cotrimoxazole: 7,
        eye_ointment: 4,
        la_6x1: 9,
        la_6x2: 8,
        ors: 5,
        zinc: 6
    },
    quantity_dispensed: {
        cotrimoxazole: 3,
        eye_ointment: 6,
        la_6x1: 1,
        la_6x2: 2,
        ors: 5,
        zinc: 4
    }
};

var expected_callback = {
    data: {
        type: "data_record",
        form: "YYYY",
        related_entities: {
            clinic: null
        },
        sms_message: example.sms_message,
        from: "+13125551212",
        errors: [],
        tasks: [],
        days_stocked_out: example.days_stocked_out,
        quantity_dispensed: example.quantity_dispensed,
        facility_id:"facility",
        month: '11',
        year: '2011'
    }
};


/*
 * STEP 1:
 *
 * Run add_sms and expect a callback to add a clinic to a data record which
 * contains all the information from the SMS.
 */
exports.test_to_record_with_auth = function (test) {

    test.expect(4);

    // Data parsed from a gateway POST
    var data = {
        from: '+13125551212',
        message: '1!YYYY!facility#2011#11#1#2#3#4#5#6#9#8#7#6#5#4',
        sent_timestamp: '1-19-12 18:45',
        sent_to: '+15551212'
    };

    // request object generated by duality includes uuid and query.form from
    // rewriter.
    var req = {
        uuid: '14dc3a5aa6',
        query: {form: 'YYYY'},
        method: "POST",
        headers: _.extend(helpers.headers("url", querystring.stringify(data)), {
            "Authorization": "Basic cm9vdDpwYXNzd29yZA=="
        }),
        body: querystring.stringify(data),
        form: data
    };

    var resp = fakerequest.update(updates.add_sms, data, req);

    var resp_body = JSON.parse(resp[1].body);

    test.same(resp_body.callback.options.headers.Authorization,
        "Basic cm9vdDpwYXNzd29yZA==");

    // form next request from callback data
    var next_req = {
        method: resp_body.callback.options.method,
        body: JSON.stringify(resp_body.callback.data),
        path: resp_body.callback.options.path,
        headers: _.extend(helpers.headers(
                    'json', JSON.stringify(resp_body.callback.data)), {
                        "Authorization": "Basic cm9vdDpwYXNzd29yZA=="
                    }),
        query: {form: 'YYYY'} // query.form gets set by rewriter
    };

    step2(test, next_req);

};

/*
 * STEP 2:
 *
 * Run data_record/add/facility and expect a callback to
 * check if the same data record already exists.
 */
var step2 = function(test, req) {

    var clinic = example.clinic;

    var viewdata = {rows: [
        {
            "key": ["+13125551212"],
            "value": clinic
        }
    ]};

    var resp = fakerequest.list(lists.data_record, viewdata, req);

    var resp_body = JSON.parse(resp.body);

    test.same(resp_body.callback.options.headers.Authorization,
        "Basic cm9vdDpwYXNzd29yZA==");


    // form next request from callback data
    var next_req = {
        method: resp_body.callback.options.method,
        body: JSON.stringify(resp_body.callback.data),
        path: resp_body.callback.options.path,
        headers: _.extend(helpers.headers(
                    'json', JSON.stringify(resp_body.callback.data)), {
                        "Authorization": "Basic cm9vdDpwYXNzd29yZA=="
                    }),
        query: {form: 'YYYY'} // query.form gets set by rewriter
    };

    step3(test, next_req);

};


/*
 * STEP 3
 *
 * Tasks pending
 *
 */
var step3 = function(test) {

    var viewdata = {
        rows: [{
            doc: {
                tasks: []
            }
        }]
    };

    var next_req = {
        method: "GET",
        body: "",
        path: baseURL + "/add",
        headers: _.extend(helpers.headers(
                    'json', ''), {
                        "Authorization": "Basic cm9vdDpwYXNzd29yZA=="
                    }),
        query: {form: 'YYYY'}
    };

    var resp = fakerequest.list(lists.tasks_pending, viewdata, next_req);

    var resp_body = JSON.parse(resp.body);

    // there is no callback since there is no tasks
    test.same(resp_body.callback, undefined);
    test.same(resp_body.payload.success, true);

    test.done();

};
